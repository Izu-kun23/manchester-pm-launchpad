
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `QuizSubmission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model QuizSubmission
 * 
 */
export type QuizSubmissionModel = runtime.Types.Result.DefaultSelection<Prisma.$QuizSubmissionPayload>

export type AggregateQuizSubmission = {
  _count: QuizSubmissionCountAggregateOutputType | null
  _min: QuizSubmissionMinAggregateOutputType | null
  _max: QuizSubmissionMaxAggregateOutputType | null
}

export type QuizSubmissionMinAggregateOutputType = {
  id: string | null
  firstName: string | null
  email: string | null
  whatsapp: string | null
  background: string | null
  resultType: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type QuizSubmissionMaxAggregateOutputType = {
  id: string | null
  firstName: string | null
  email: string | null
  whatsapp: string | null
  background: string | null
  resultType: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type QuizSubmissionCountAggregateOutputType = {
  id: number
  firstName: number
  email: number
  whatsapp: number
  background: number
  answers: number
  scores: number
  resultType: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type QuizSubmissionMinAggregateInputType = {
  id?: true
  firstName?: true
  email?: true
  whatsapp?: true
  background?: true
  resultType?: true
  createdAt?: true
  updatedAt?: true
}

export type QuizSubmissionMaxAggregateInputType = {
  id?: true
  firstName?: true
  email?: true
  whatsapp?: true
  background?: true
  resultType?: true
  createdAt?: true
  updatedAt?: true
}

export type QuizSubmissionCountAggregateInputType = {
  id?: true
  firstName?: true
  email?: true
  whatsapp?: true
  background?: true
  answers?: true
  scores?: true
  resultType?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type QuizSubmissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QuizSubmission to aggregate.
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizSubmissions to fetch.
   */
  orderBy?: Prisma.QuizSubmissionOrderByWithRelationInput | Prisma.QuizSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuizSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned QuizSubmissions
  **/
  _count?: true | QuizSubmissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuizSubmissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuizSubmissionMaxAggregateInputType
}

export type GetQuizSubmissionAggregateType<T extends QuizSubmissionAggregateArgs> = {
      [P in keyof T & keyof AggregateQuizSubmission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuizSubmission[P]>
    : Prisma.GetScalarType<T[P], AggregateQuizSubmission[P]>
}




export type QuizSubmissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuizSubmissionWhereInput
  orderBy?: Prisma.QuizSubmissionOrderByWithAggregationInput | Prisma.QuizSubmissionOrderByWithAggregationInput[]
  by: Prisma.QuizSubmissionScalarFieldEnum[] | Prisma.QuizSubmissionScalarFieldEnum
  having?: Prisma.QuizSubmissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: QuizSubmissionCountAggregateInputType | true
  _min?: QuizSubmissionMinAggregateInputType
  _max?: QuizSubmissionMaxAggregateInputType
}

export type QuizSubmissionGroupByOutputType = {
  id: string
  firstName: string
  email: string
  whatsapp: string
  background: string
  answers: runtime.JsonValue
  scores: runtime.JsonValue
  resultType: string
  createdAt: Date
  updatedAt: Date
  _count: QuizSubmissionCountAggregateOutputType | null
  _min: QuizSubmissionMinAggregateOutputType | null
  _max: QuizSubmissionMaxAggregateOutputType | null
}

type GetQuizSubmissionGroupByPayload<T extends QuizSubmissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuizSubmissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuizSubmissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuizSubmissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuizSubmissionGroupByOutputType[P]>
      }
    >
  >



export type QuizSubmissionWhereInput = {
  AND?: Prisma.QuizSubmissionWhereInput | Prisma.QuizSubmissionWhereInput[]
  OR?: Prisma.QuizSubmissionWhereInput[]
  NOT?: Prisma.QuizSubmissionWhereInput | Prisma.QuizSubmissionWhereInput[]
  id?: Prisma.StringFilter<"QuizSubmission"> | string
  firstName?: Prisma.StringFilter<"QuizSubmission"> | string
  email?: Prisma.StringFilter<"QuizSubmission"> | string
  whatsapp?: Prisma.StringFilter<"QuizSubmission"> | string
  background?: Prisma.StringFilter<"QuizSubmission"> | string
  answers?: Prisma.JsonFilter<"QuizSubmission">
  scores?: Prisma.JsonFilter<"QuizSubmission">
  resultType?: Prisma.StringFilter<"QuizSubmission"> | string
  createdAt?: Prisma.DateTimeFilter<"QuizSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"QuizSubmission"> | Date | string
}

export type QuizSubmissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  whatsapp?: Prisma.SortOrder
  background?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  resultType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.QuizSubmissionOrderByRelevanceInput
}

export type QuizSubmissionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.QuizSubmissionWhereInput | Prisma.QuizSubmissionWhereInput[]
  OR?: Prisma.QuizSubmissionWhereInput[]
  NOT?: Prisma.QuizSubmissionWhereInput | Prisma.QuizSubmissionWhereInput[]
  firstName?: Prisma.StringFilter<"QuizSubmission"> | string
  email?: Prisma.StringFilter<"QuizSubmission"> | string
  whatsapp?: Prisma.StringFilter<"QuizSubmission"> | string
  background?: Prisma.StringFilter<"QuizSubmission"> | string
  answers?: Prisma.JsonFilter<"QuizSubmission">
  scores?: Prisma.JsonFilter<"QuizSubmission">
  resultType?: Prisma.StringFilter<"QuizSubmission"> | string
  createdAt?: Prisma.DateTimeFilter<"QuizSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"QuizSubmission"> | Date | string
}, "id">

export type QuizSubmissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  whatsapp?: Prisma.SortOrder
  background?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  resultType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.QuizSubmissionCountOrderByAggregateInput
  _max?: Prisma.QuizSubmissionMaxOrderByAggregateInput
  _min?: Prisma.QuizSubmissionMinOrderByAggregateInput
}

export type QuizSubmissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuizSubmissionScalarWhereWithAggregatesInput | Prisma.QuizSubmissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.QuizSubmissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.QuizSubmissionScalarWhereWithAggregatesInput | Prisma.QuizSubmissionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  email?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  whatsapp?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  background?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  answers?: Prisma.JsonWithAggregatesFilter<"QuizSubmission">
  scores?: Prisma.JsonWithAggregatesFilter<"QuizSubmission">
  resultType?: Prisma.StringWithAggregatesFilter<"QuizSubmission"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"QuizSubmission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"QuizSubmission"> | Date | string
}

export type QuizSubmissionCreateInput = {
  id?: string
  firstName: string
  email: string
  whatsapp: string
  background: string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QuizSubmissionUncheckedCreateInput = {
  id?: string
  firstName: string
  email: string
  whatsapp: string
  background: string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QuizSubmissionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  whatsapp?: Prisma.StringFieldUpdateOperationsInput | string
  background?: Prisma.StringFieldUpdateOperationsInput | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizSubmissionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  whatsapp?: Prisma.StringFieldUpdateOperationsInput | string
  background?: Prisma.StringFieldUpdateOperationsInput | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizSubmissionCreateManyInput = {
  id?: string
  firstName: string
  email: string
  whatsapp: string
  background: string
  answers: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type QuizSubmissionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  whatsapp?: Prisma.StringFieldUpdateOperationsInput | string
  background?: Prisma.StringFieldUpdateOperationsInput | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizSubmissionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  whatsapp?: Prisma.StringFieldUpdateOperationsInput | string
  background?: Prisma.StringFieldUpdateOperationsInput | string
  answers?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  scores?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  resultType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type QuizSubmissionOrderByRelevanceInput = {
  fields: Prisma.QuizSubmissionOrderByRelevanceFieldEnum | Prisma.QuizSubmissionOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type QuizSubmissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  whatsapp?: Prisma.SortOrder
  background?: Prisma.SortOrder
  answers?: Prisma.SortOrder
  scores?: Prisma.SortOrder
  resultType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type QuizSubmissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  whatsapp?: Prisma.SortOrder
  background?: Prisma.SortOrder
  resultType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type QuizSubmissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  whatsapp?: Prisma.SortOrder
  background?: Prisma.SortOrder
  resultType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type QuizSubmissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  email?: boolean
  whatsapp?: boolean
  background?: boolean
  answers?: boolean
  scores?: boolean
  resultType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["quizSubmission"]>



export type QuizSubmissionSelectScalar = {
  id?: boolean
  firstName?: boolean
  email?: boolean
  whatsapp?: boolean
  background?: boolean
  answers?: boolean
  scores?: boolean
  resultType?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type QuizSubmissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firstName" | "email" | "whatsapp" | "background" | "answers" | "scores" | "resultType" | "createdAt" | "updatedAt", ExtArgs["result"]["quizSubmission"]>

export type $QuizSubmissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "QuizSubmission"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    firstName: string
    email: string
    whatsapp: string
    background: string
    answers: runtime.JsonValue
    scores: runtime.JsonValue
    resultType: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["quizSubmission"]>
  composites: {}
}

export type QuizSubmissionGetPayload<S extends boolean | null | undefined | QuizSubmissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload, S>

export type QuizSubmissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuizSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuizSubmissionCountAggregateInputType | true
  }

export interface QuizSubmissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizSubmission'], meta: { name: 'QuizSubmission' } }
  /**
   * Find zero or one QuizSubmission that matches the filter.
   * @param {QuizSubmissionFindUniqueArgs} args - Arguments to find a QuizSubmission
   * @example
   * // Get one QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuizSubmissionFindUniqueArgs>(args: Prisma.SelectSubset<T, QuizSubmissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one QuizSubmission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuizSubmissionFindUniqueOrThrowArgs} args - Arguments to find a QuizSubmission
   * @example
   * // Get one QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuizSubmissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuizSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QuizSubmission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionFindFirstArgs} args - Arguments to find a QuizSubmission
   * @example
   * // Get one QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuizSubmissionFindFirstArgs>(args?: Prisma.SelectSubset<T, QuizSubmissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first QuizSubmission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionFindFirstOrThrowArgs} args - Arguments to find a QuizSubmission
   * @example
   * // Get one QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuizSubmissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuizSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more QuizSubmissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all QuizSubmissions
   * const quizSubmissions = await prisma.quizSubmission.findMany()
   * 
   * // Get first 10 QuizSubmissions
   * const quizSubmissions = await prisma.quizSubmission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const quizSubmissionWithIdOnly = await prisma.quizSubmission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuizSubmissionFindManyArgs>(args?: Prisma.SelectSubset<T, QuizSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a QuizSubmission.
   * @param {QuizSubmissionCreateArgs} args - Arguments to create a QuizSubmission.
   * @example
   * // Create one QuizSubmission
   * const QuizSubmission = await prisma.quizSubmission.create({
   *   data: {
   *     // ... data to create a QuizSubmission
   *   }
   * })
   * 
   */
  create<T extends QuizSubmissionCreateArgs>(args: Prisma.SelectSubset<T, QuizSubmissionCreateArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many QuizSubmissions.
   * @param {QuizSubmissionCreateManyArgs} args - Arguments to create many QuizSubmissions.
   * @example
   * // Create many QuizSubmissions
   * const quizSubmission = await prisma.quizSubmission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuizSubmissionCreateManyArgs>(args?: Prisma.SelectSubset<T, QuizSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a QuizSubmission.
   * @param {QuizSubmissionDeleteArgs} args - Arguments to delete one QuizSubmission.
   * @example
   * // Delete one QuizSubmission
   * const QuizSubmission = await prisma.quizSubmission.delete({
   *   where: {
   *     // ... filter to delete one QuizSubmission
   *   }
   * })
   * 
   */
  delete<T extends QuizSubmissionDeleteArgs>(args: Prisma.SelectSubset<T, QuizSubmissionDeleteArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one QuizSubmission.
   * @param {QuizSubmissionUpdateArgs} args - Arguments to update one QuizSubmission.
   * @example
   * // Update one QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuizSubmissionUpdateArgs>(args: Prisma.SelectSubset<T, QuizSubmissionUpdateArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more QuizSubmissions.
   * @param {QuizSubmissionDeleteManyArgs} args - Arguments to filter QuizSubmissions to delete.
   * @example
   * // Delete a few QuizSubmissions
   * const { count } = await prisma.quizSubmission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuizSubmissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuizSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more QuizSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many QuizSubmissions
   * const quizSubmission = await prisma.quizSubmission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuizSubmissionUpdateManyArgs>(args: Prisma.SelectSubset<T, QuizSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one QuizSubmission.
   * @param {QuizSubmissionUpsertArgs} args - Arguments to update or create a QuizSubmission.
   * @example
   * // Update or create a QuizSubmission
   * const quizSubmission = await prisma.quizSubmission.upsert({
   *   create: {
   *     // ... data to create a QuizSubmission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the QuizSubmission we want to update
   *   }
   * })
   */
  upsert<T extends QuizSubmissionUpsertArgs>(args: Prisma.SelectSubset<T, QuizSubmissionUpsertArgs<ExtArgs>>): Prisma.Prisma__QuizSubmissionClient<runtime.Types.Result.GetResult<Prisma.$QuizSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of QuizSubmissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionCountArgs} args - Arguments to filter QuizSubmissions to count.
   * @example
   * // Count the number of QuizSubmissions
   * const count = await prisma.quizSubmission.count({
   *   where: {
   *     // ... the filter for the QuizSubmissions we want to count
   *   }
   * })
  **/
  count<T extends QuizSubmissionCountArgs>(
    args?: Prisma.Subset<T, QuizSubmissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuizSubmissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a QuizSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuizSubmissionAggregateArgs>(args: Prisma.Subset<T, QuizSubmissionAggregateArgs>): Prisma.PrismaPromise<GetQuizSubmissionAggregateType<T>>

  /**
   * Group by QuizSubmission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuizSubmissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuizSubmissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuizSubmissionGroupByArgs['orderBy'] }
      : { orderBy?: QuizSubmissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuizSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the QuizSubmission model
 */
readonly fields: QuizSubmissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for QuizSubmission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuizSubmissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the QuizSubmission model
 */
export interface QuizSubmissionFieldRefs {
  readonly id: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly firstName: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly email: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly whatsapp: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly background: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly answers: Prisma.FieldRef<"QuizSubmission", 'Json'>
  readonly scores: Prisma.FieldRef<"QuizSubmission", 'Json'>
  readonly resultType: Prisma.FieldRef<"QuizSubmission", 'String'>
  readonly createdAt: Prisma.FieldRef<"QuizSubmission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"QuizSubmission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * QuizSubmission findUnique
 */
export type QuizSubmissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which QuizSubmission to fetch.
   */
  where: Prisma.QuizSubmissionWhereUniqueInput
}

/**
 * QuizSubmission findUniqueOrThrow
 */
export type QuizSubmissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which QuizSubmission to fetch.
   */
  where: Prisma.QuizSubmissionWhereUniqueInput
}

/**
 * QuizSubmission findFirst
 */
export type QuizSubmissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which QuizSubmission to fetch.
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizSubmissions to fetch.
   */
  orderBy?: Prisma.QuizSubmissionOrderByWithRelationInput | Prisma.QuizSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QuizSubmissions.
   */
  cursor?: Prisma.QuizSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QuizSubmissions.
   */
  distinct?: Prisma.QuizSubmissionScalarFieldEnum | Prisma.QuizSubmissionScalarFieldEnum[]
}

/**
 * QuizSubmission findFirstOrThrow
 */
export type QuizSubmissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which QuizSubmission to fetch.
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizSubmissions to fetch.
   */
  orderBy?: Prisma.QuizSubmissionOrderByWithRelationInput | Prisma.QuizSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for QuizSubmissions.
   */
  cursor?: Prisma.QuizSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizSubmissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of QuizSubmissions.
   */
  distinct?: Prisma.QuizSubmissionScalarFieldEnum | Prisma.QuizSubmissionScalarFieldEnum[]
}

/**
 * QuizSubmission findMany
 */
export type QuizSubmissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter, which QuizSubmissions to fetch.
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of QuizSubmissions to fetch.
   */
  orderBy?: Prisma.QuizSubmissionOrderByWithRelationInput | Prisma.QuizSubmissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing QuizSubmissions.
   */
  cursor?: Prisma.QuizSubmissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` QuizSubmissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` QuizSubmissions.
   */
  skip?: number
  distinct?: Prisma.QuizSubmissionScalarFieldEnum | Prisma.QuizSubmissionScalarFieldEnum[]
}

/**
 * QuizSubmission create
 */
export type QuizSubmissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to create a QuizSubmission.
   */
  data: Prisma.XOR<Prisma.QuizSubmissionCreateInput, Prisma.QuizSubmissionUncheckedCreateInput>
}

/**
 * QuizSubmission createMany
 */
export type QuizSubmissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many QuizSubmissions.
   */
  data: Prisma.QuizSubmissionCreateManyInput | Prisma.QuizSubmissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * QuizSubmission update
 */
export type QuizSubmissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * The data needed to update a QuizSubmission.
   */
  data: Prisma.XOR<Prisma.QuizSubmissionUpdateInput, Prisma.QuizSubmissionUncheckedUpdateInput>
  /**
   * Choose, which QuizSubmission to update.
   */
  where: Prisma.QuizSubmissionWhereUniqueInput
}

/**
 * QuizSubmission updateMany
 */
export type QuizSubmissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update QuizSubmissions.
   */
  data: Prisma.XOR<Prisma.QuizSubmissionUpdateManyMutationInput, Prisma.QuizSubmissionUncheckedUpdateManyInput>
  /**
   * Filter which QuizSubmissions to update
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * Limit how many QuizSubmissions to update.
   */
  limit?: number
}

/**
 * QuizSubmission upsert
 */
export type QuizSubmissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * The filter to search for the QuizSubmission to update in case it exists.
   */
  where: Prisma.QuizSubmissionWhereUniqueInput
  /**
   * In case the QuizSubmission found by the `where` argument doesn't exist, create a new QuizSubmission with this data.
   */
  create: Prisma.XOR<Prisma.QuizSubmissionCreateInput, Prisma.QuizSubmissionUncheckedCreateInput>
  /**
   * In case the QuizSubmission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuizSubmissionUpdateInput, Prisma.QuizSubmissionUncheckedUpdateInput>
}

/**
 * QuizSubmission delete
 */
export type QuizSubmissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
  /**
   * Filter which QuizSubmission to delete.
   */
  where: Prisma.QuizSubmissionWhereUniqueInput
}

/**
 * QuizSubmission deleteMany
 */
export type QuizSubmissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which QuizSubmissions to delete
   */
  where?: Prisma.QuizSubmissionWhereInput
  /**
   * Limit how many QuizSubmissions to delete.
   */
  limit?: number
}

/**
 * QuizSubmission without action
 */
export type QuizSubmissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the QuizSubmission
   */
  select?: Prisma.QuizSubmissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the QuizSubmission
   */
  omit?: Prisma.QuizSubmissionOmit<ExtArgs> | null
}
